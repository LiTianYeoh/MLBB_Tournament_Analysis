Todo:
--------------- Draft readme.txt
-- explain code
-- explain known issue
--- data scraped might be errornous on tournaments shere liquipedia data is incomplete.
-------- eg when there are empty hero in ban/pick, or in match with forfeited games.

-- hero vector embedding
/- wr matrix

---- Scraping
/ scrape hero info
/ scrape tournament list
-/ auto add in those not duplicates
/ scrape tournament info
/ scrape regular season page
-/ handle cases of more than 1 regular season/qualifier
/ consolidate game_data.csv for given list of tournaments
-/ read all from tournament_data.csv
/ convert game_time_str to game_time_sec
/ map hero_name with hero_codes
/ convert date: match_date, start_date, end_date
/ liquipedia tier
- handle edge cases:
-- empty hero (pick/ban)
-- forfeit match (not so robust yet)


---- Analysis
-/ descriptive stats
mpnt = most pick number team
mprt = most pick rate team
mwrt = most win rate team
mbat = most banned against team

bp = ban + pick
pick_rate = N_pick / (N_total - N_bans - N_opp_picks)

base stats: 
--- num_games
--/ {red/blue} {ban_num/pick_num}
--/ {both} {win_num/lose_num/win_avg_game_time_sec/lose_avg_game_time_sec}
--- {both} {mpnt/mprt/mwrt} {_name/_pick_num/_win/_win_rate}
--- {both} {mpnt/mprt/mwrt} {_non-pick_num/_pick_rate}

derived stats:
--/ {red/blue} {ban_ratio/pick_rate}
--/ {both} {ban_num/ban_rate/pick_num/pick_rate/bp_num/bp_rate/win_rate}

- optimise algorithm (parallel etc.)

- hero partner/counter relationship




------ tournament_info
Columns:
tournament_code: int, self-defined primary key
tournament_name: str
tier: str, {S/A/Others} (according to Liquipedia
start_date: str
end_date: str
patch_code: str
url: str
last_updated: yyyymmdd, date of latest scraping date
csv_name: str, name of output csv



------- game_info
? game_code: int, self-defined primary key
tournament_code: int, foreign key
date: yyyymmdd

t1_name: str
t1_side: blue/red
t1_picks: list of int (hero_codes)
t1_bans: list of int (hero_codes)
t1_result: {0/1}

t2_name: str
t2_side: blue/red
t2_picks: list of int (hero_codes)
t2_bans: list of int (hero_codes)
t2_result: {0/1}

game_time_str: str, game_time as per scraped from url
game_time_sec: int, game length in sec
tournament_stage: str, {bracket/qualifiers}
match_format_BON: int, "best of n"
game_no: int, starting from 1
t1_points: int, t1 current number of wins
t2_points: int, t2 current number of wins


(match_stage: str)
(t1_{p1-p5}: int, hero_code)
(t1_{b1-b5}: int, hero_code)
(t2_{b1-b5}: int, hero_code)
(t2_{p1-p5}: int, hero_code)



To be done in future:
------ patch_info
date: yyyymmdd, primary key(?)
patch_code: str

------ analysis
indi_hero_bp: calculate pick rate of a hero for each team, then get most pick rate team